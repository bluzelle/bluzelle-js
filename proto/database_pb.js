/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.database_create', null, global);
goog.exportSymbol('proto.database_delete', null, global);
goog.exportSymbol('proto.database_empty', null, global);
goog.exportSymbol('proto.database_has', null, global);
goog.exportSymbol('proto.database_header', null, global);
goog.exportSymbol('proto.database_msg', null, global);
goog.exportSymbol('proto.database_read', null, global);
goog.exportSymbol('proto.database_redirect_response', null, global);
goog.exportSymbol('proto.database_response', null, global);
goog.exportSymbol('proto.database_response.response', null, global);
goog.exportSymbol('proto.database_update', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.database_msg.oneofGroups_);
};
goog.inherits(proto.database_msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_msg.displayName = 'proto.database_msg';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.database_msg.oneofGroups_ = [[10,11,12,13,14,15,16]];

/**
 * @enum {number}
 */
proto.database_msg.MsgCase = {
  MSG_NOT_SET: 0,
  CREATE: 10,
  READ: 11,
  UPDATE: 12,
  DELETE: 13,
  HAS: 14,
  KEYS: 15,
  SIZE: 16
};

/**
 * @return {proto.database_msg.MsgCase}
 */
proto.database_msg.prototype.getMsgCase = function() {
  return /** @type {proto.database_msg.MsgCase} */(jspb.Message.computeOneofCase(this, proto.database_msg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_msg.prototype.toObject = function(opt_includeInstance) {
  return proto.database_msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.database_header.toObject(includeInstance, f),
    create: (f = msg.getCreate()) && proto.database_create.toObject(includeInstance, f),
    read: (f = msg.getRead()) && proto.database_read.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.database_update.toObject(includeInstance, f),
    pb_delete: (f = msg.getDelete()) && proto.database_delete.toObject(includeInstance, f),
    has: (f = msg.getHas()) && proto.database_has.toObject(includeInstance, f),
    keys: (f = msg.getKeys()) && proto.database_empty.toObject(includeInstance, f),
    size: (f = msg.getSize()) && proto.database_empty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_msg}
 */
proto.database_msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_msg;
  return proto.database_msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_msg}
 */
proto.database_msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.database_header;
      reader.readMessage(value,proto.database_header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 10:
      var value = new proto.database_create;
      reader.readMessage(value,proto.database_create.deserializeBinaryFromReader);
      msg.setCreate(value);
      break;
    case 11:
      var value = new proto.database_read;
      reader.readMessage(value,proto.database_read.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    case 12:
      var value = new proto.database_update;
      reader.readMessage(value,proto.database_update.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    case 13:
      var value = new proto.database_delete;
      reader.readMessage(value,proto.database_delete.deserializeBinaryFromReader);
      msg.setDelete(value);
      break;
    case 14:
      var value = new proto.database_has;
      reader.readMessage(value,proto.database_has.deserializeBinaryFromReader);
      msg.setHas(value);
      break;
    case 15:
      var value = new proto.database_empty;
      reader.readMessage(value,proto.database_empty.deserializeBinaryFromReader);
      msg.setKeys(value);
      break;
    case 16:
      var value = new proto.database_empty;
      reader.readMessage(value,proto.database_empty.deserializeBinaryFromReader);
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.database_header.serializeBinaryToWriter
    );
  }
  f = message.getCreate();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.database_create.serializeBinaryToWriter
    );
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.database_read.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.database_update.serializeBinaryToWriter
    );
  }
  f = message.getDelete();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.database_delete.serializeBinaryToWriter
    );
  }
  f = message.getHas();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.database_has.serializeBinaryToWriter
    );
  }
  f = message.getKeys();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.database_empty.serializeBinaryToWriter
    );
  }
  f = message.getSize();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.database_empty.serializeBinaryToWriter
    );
  }
};


/**
 * optional database_header header = 2;
 * @return {?proto.database_header}
 */
proto.database_msg.prototype.getHeader = function() {
  return /** @type{?proto.database_header} */ (
    jspb.Message.getWrapperField(this, proto.database_header, 2));
};


/** @param {?proto.database_header|undefined} value */
proto.database_msg.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.database_msg.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_msg.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional database_create create = 10;
 * @return {?proto.database_create}
 */
proto.database_msg.prototype.getCreate = function() {
  return /** @type{?proto.database_create} */ (
    jspb.Message.getWrapperField(this, proto.database_create, 10));
};


/** @param {?proto.database_create|undefined} value */
proto.database_msg.prototype.setCreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.database_msg.oneofGroups_[0], value);
};


proto.database_msg.prototype.clearCreate = function() {
  this.setCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_msg.prototype.hasCreate = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional database_read read = 11;
 * @return {?proto.database_read}
 */
proto.database_msg.prototype.getRead = function() {
  return /** @type{?proto.database_read} */ (
    jspb.Message.getWrapperField(this, proto.database_read, 11));
};


/** @param {?proto.database_read|undefined} value */
proto.database_msg.prototype.setRead = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.database_msg.oneofGroups_[0], value);
};


proto.database_msg.prototype.clearRead = function() {
  this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_msg.prototype.hasRead = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional database_update update = 12;
 * @return {?proto.database_update}
 */
proto.database_msg.prototype.getUpdate = function() {
  return /** @type{?proto.database_update} */ (
    jspb.Message.getWrapperField(this, proto.database_update, 12));
};


/** @param {?proto.database_update|undefined} value */
proto.database_msg.prototype.setUpdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.database_msg.oneofGroups_[0], value);
};


proto.database_msg.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_msg.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional database_delete delete = 13;
 * @return {?proto.database_delete}
 */
proto.database_msg.prototype.getDelete = function() {
  return /** @type{?proto.database_delete} */ (
    jspb.Message.getWrapperField(this, proto.database_delete, 13));
};


/** @param {?proto.database_delete|undefined} value */
proto.database_msg.prototype.setDelete = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.database_msg.oneofGroups_[0], value);
};


proto.database_msg.prototype.clearDelete = function() {
  this.setDelete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_msg.prototype.hasDelete = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional database_has has = 14;
 * @return {?proto.database_has}
 */
proto.database_msg.prototype.getHas = function() {
  return /** @type{?proto.database_has} */ (
    jspb.Message.getWrapperField(this, proto.database_has, 14));
};


/** @param {?proto.database_has|undefined} value */
proto.database_msg.prototype.setHas = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.database_msg.oneofGroups_[0], value);
};


proto.database_msg.prototype.clearHas = function() {
  this.setHas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_msg.prototype.hasHas = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional database_empty keys = 15;
 * @return {?proto.database_empty}
 */
proto.database_msg.prototype.getKeys = function() {
  return /** @type{?proto.database_empty} */ (
    jspb.Message.getWrapperField(this, proto.database_empty, 15));
};


/** @param {?proto.database_empty|undefined} value */
proto.database_msg.prototype.setKeys = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.database_msg.oneofGroups_[0], value);
};


proto.database_msg.prototype.clearKeys = function() {
  this.setKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_msg.prototype.hasKeys = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional database_empty size = 16;
 * @return {?proto.database_empty}
 */
proto.database_msg.prototype.getSize = function() {
  return /** @type{?proto.database_empty} */ (
    jspb.Message.getWrapperField(this, proto.database_empty, 16));
};


/** @param {?proto.database_empty|undefined} value */
proto.database_msg.prototype.setSize = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.database_msg.oneofGroups_[0], value);
};


proto.database_msg.prototype.clearSize = function() {
  this.setSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_msg.prototype.hasSize = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_redirect_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database_redirect_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_redirect_response.displayName = 'proto.database_redirect_response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_redirect_response.prototype.toObject = function(opt_includeInstance) {
  return proto.database_redirect_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_redirect_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_redirect_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    leaderName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    leaderHost: jspb.Message.getFieldWithDefault(msg, 3, ""),
    leaderPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    leaderHttpPort: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_redirect_response}
 */
proto.database_redirect_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_redirect_response;
  return proto.database_redirect_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_redirect_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_redirect_response}
 */
proto.database_redirect_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaderName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaderHost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeaderPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeaderHttpPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_redirect_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_redirect_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_redirect_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_redirect_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLeaderName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLeaderHost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLeaderPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLeaderHttpPort();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string leader_id = 1;
 * @return {string}
 */
proto.database_redirect_response.prototype.getLeaderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.database_redirect_response.prototype.setLeaderId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string leader_name = 2;
 * @return {string}
 */
proto.database_redirect_response.prototype.getLeaderName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.database_redirect_response.prototype.setLeaderName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string leader_host = 3;
 * @return {string}
 */
proto.database_redirect_response.prototype.getLeaderHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.database_redirect_response.prototype.setLeaderHost = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 leader_port = 4;
 * @return {number}
 */
proto.database_redirect_response.prototype.getLeaderPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.database_redirect_response.prototype.setLeaderPort = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 leader_http_port = 5;
 * @return {number}
 */
proto.database_redirect_response.prototype.getLeaderHttpPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.database_redirect_response.prototype.setLeaderHttpPort = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_header.displayName = 'proto.database_header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_header.prototype.toObject = function(opt_includeInstance) {
  return proto.database_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_header}
 */
proto.database_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_header;
  return proto.database_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_header}
 */
proto.database_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransactionId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string db_uuid = 1;
 * @return {string}
 */
proto.database_header.prototype.getDbUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.database_header.prototype.setDbUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 transaction_id = 2;
 * @return {number}
 */
proto.database_header.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.database_header.prototype.setTransactionId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database_create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_create.displayName = 'proto.database_create';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_create.prototype.toObject = function(opt_includeInstance) {
  return proto.database_create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_create.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_create}
 */
proto.database_create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_create;
  return proto.database_create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_create}
 */
proto.database_create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.database_create.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.database_create.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.database_create.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.database_create.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.database_create.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.database_create.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_read = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database_read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_read.displayName = 'proto.database_read';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_read.prototype.toObject = function(opt_includeInstance) {
  return proto.database_read.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_read} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_read.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_read}
 */
proto.database_read.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_read;
  return proto.database_read.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_read}
 */
proto.database_read.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_read.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_read.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.database_read.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.database_read.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database_update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_update.displayName = 'proto.database_update';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_update.prototype.toObject = function(opt_includeInstance) {
  return proto.database_update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_update.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_update}
 */
proto.database_update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_update;
  return proto.database_update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_update}
 */
proto.database_update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.database_update.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.database_update.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.database_update.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.database_update.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.database_update.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.database_update.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database_delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_delete.displayName = 'proto.database_delete';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_delete.prototype.toObject = function(opt_includeInstance) {
  return proto.database_delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_delete.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_delete}
 */
proto.database_delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_delete;
  return proto.database_delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_delete}
 */
proto.database_delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.database_delete.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.database_delete.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_has = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database_has, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_has.displayName = 'proto.database_has';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_has.prototype.toObject = function(opt_includeInstance) {
  return proto.database_has.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_has} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_has.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_has}
 */
proto.database_has.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_has;
  return proto.database_has.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_has} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_has}
 */
proto.database_has.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_has.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_has.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_has} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_has.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.database_has.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.database_has.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.database_empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_empty.displayName = 'proto.database_empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_empty.prototype.toObject = function(opt_includeInstance) {
  return proto.database_empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_empty}
 */
proto.database_empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_empty;
  return proto.database_empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_empty}
 */
proto.database_empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.database_response.oneofGroups_);
};
goog.inherits(proto.database_response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_response.displayName = 'proto.database_response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.database_response.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.database_response.SuccessCase = {
  SUCCESS_NOT_SET: 0,
  REDIRECT: 2,
  RESP: 3
};

/**
 * @return {proto.database_response.SuccessCase}
 */
proto.database_response.prototype.getSuccessCase = function() {
  return /** @type {proto.database_response.SuccessCase} */(jspb.Message.computeOneofCase(this, proto.database_response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_response.prototype.toObject = function(opt_includeInstance) {
  return proto.database_response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_response.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.database_header.toObject(includeInstance, f),
    redirect: (f = msg.getRedirect()) && proto.database_redirect_response.toObject(includeInstance, f),
    resp: (f = msg.getResp()) && proto.database_response.response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_response}
 */
proto.database_response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_response;
  return proto.database_response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_response}
 */
proto.database_response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.database_header;
      reader.readMessage(value,proto.database_header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.database_redirect_response;
      reader.readMessage(value,proto.database_redirect_response.deserializeBinaryFromReader);
      msg.setRedirect(value);
      break;
    case 3:
      var value = new proto.database_response.response;
      reader.readMessage(value,proto.database_response.response.deserializeBinaryFromReader);
      msg.setResp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.database_header.serializeBinaryToWriter
    );
  }
  f = message.getRedirect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.database_redirect_response.serializeBinaryToWriter
    );
  }
  f = message.getResp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.database_response.response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.database_response.response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.database_response.response.repeatedFields_, null);
};
goog.inherits(proto.database_response.response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.database_response.response.displayName = 'proto.database_response.response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.database_response.response.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.database_response.response.prototype.toObject = function(opt_includeInstance) {
  return proto.database_response.response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.database_response.response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_response.response.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    has: jspb.Message.getFieldWithDefault(msg, 5, false),
    size: jspb.Message.getFieldWithDefault(msg, 6, 0),
    error: jspb.Message.getFieldWithDefault(msg, 7, ""),
    keysList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.database_response.response}
 */
proto.database_response.response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.database_response.response;
  return proto.database_response.response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.database_response.response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.database_response.response}
 */
proto.database_response.response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHas(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.database_response.response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.database_response.response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.database_response.response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.database_response.response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getHas();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional bytes value = 4;
 * @return {!(string|Uint8Array)}
 */
proto.database_response.response.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes value = 4;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.database_response.response.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.database_response.response.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.database_response.response.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool has = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.database_response.response.prototype.getHas = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.database_response.response.prototype.setHas = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int32 size = 6;
 * @return {number}
 */
proto.database_response.response.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.database_response.response.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string error = 7;
 * @return {string}
 */
proto.database_response.response.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.database_response.response.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string keys = 8;
 * @return {!Array<string>}
 */
proto.database_response.response.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.database_response.response.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.database_response.response.prototype.addKeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.database_response.response.prototype.clearKeysList = function() {
  this.setKeysList([]);
};


/**
 * optional database_header header = 1;
 * @return {?proto.database_header}
 */
proto.database_response.prototype.getHeader = function() {
  return /** @type{?proto.database_header} */ (
    jspb.Message.getWrapperField(this, proto.database_header, 1));
};


/** @param {?proto.database_header|undefined} value */
proto.database_response.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.database_response.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_response.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional database_redirect_response redirect = 2;
 * @return {?proto.database_redirect_response}
 */
proto.database_response.prototype.getRedirect = function() {
  return /** @type{?proto.database_redirect_response} */ (
    jspb.Message.getWrapperField(this, proto.database_redirect_response, 2));
};


/** @param {?proto.database_redirect_response|undefined} value */
proto.database_response.prototype.setRedirect = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.database_response.oneofGroups_[0], value);
};


proto.database_response.prototype.clearRedirect = function() {
  this.setRedirect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_response.prototype.hasRedirect = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional response resp = 3;
 * @return {?proto.database_response.response}
 */
proto.database_response.prototype.getResp = function() {
  return /** @type{?proto.database_response.response} */ (
    jspb.Message.getWrapperField(this, proto.database_response.response, 3));
};


/** @param {?proto.database_response.response|undefined} value */
proto.database_response.prototype.setResp = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.database_response.oneofGroups_[0], value);
};


proto.database_response.prototype.clearResp = function() {
  this.setResp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.database_response.prototype.hasResp = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
